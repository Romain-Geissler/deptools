{"body":"\r\n# Synopsis\r\n\r\nThe deptools utilities provide a simple source dependency scheme for\r\nmanaging a multiple components project.\r\n\r\nThe list of components is stored in a simple _DEPENDENCIES_ file at the\r\nroot of the parent component.\r\n\r\nA _dependencies_ script stored at the root of the component is in charge of\r\ninterpreting the list of dependencies.\r\n\r\nThe components may be hosted in distinct repositories and repository formats.  \r\n\r\nThe only requirements for starting a project are thus:\r\n* the dependencies script (https://buildhive.cloudbees.com/job/guillon/job/deptools/ws/dependencies)\r\n* a well formed _DEPENDENCIES_ specification (ref to the example below).\r\n\r\n# Example\r\n\r\nFor instance here is a specification for the head branch of the deptools\r\nproject components, including the sources tree and the GitHub project pages:\r\n\r\n    $ cd deptools-all\r\n    $ cat DEPENDENCIES\r\n    configurations:\r\n      default: [ dep-tools, gh-pages ]\r\n    repositories:\r\n      dep-tools:\r\n        format: git\r\n        repos: https://github.com/guillon/deptools.git\r\n        label: master\r\n        alias: dep-tools\r\n      gh-pages:\r\n        format: git\r\n        repos: https://github.com/guillon/deptools.git\r\n        label: gh-pages\r\n\r\nThe `dependencies` script that can be stored with the components\r\ndescription is used to extract the components:\r\n\r\n    $ cd deptools-all\r\n    $ ./dependencies extract\r\n    Cloning into 'deptools'  # This is actually a dependency of the ./dependencies script itself\r\n    Cloning into 'dep-tools' # This is the first component described in the default configuration\r\n    Cloning into 'gh-pages'  # This is the second component\r\n\r\nThe actual manifest for a specific version of the components is obtained\r\nfor instance with:\r\n\r\n    $ ./dependencies dump_actual | tee MANIFEST-v0.1\r\n    configurations:\r\n      default: [dep-tools, gh-pages]\r\n    repositories:\r\n      dep-tools: {alias: dep-tools, format: git, label: master, repos: 'https://github.com/guillon/deptools.git',\r\n        revision: 8c4045382b170ae6b21d6ca4544b8f28c20cd40a}\r\n      gh-pages: {format: git, label: gh-pages, repos: 'https://github.com/guillon/deptools.git',\r\n        revision: d7489431c04960efe3080e8a49578381266926c5}\r\n \r\nIt can be stored in the deptools-all project for latter extraction:\r\n\r\n    $ cd deptools-all\r\n    $ ./dependencies extract -f MANIFEST-v0.1\r\n\r\nFor projects with strict management of components revision, the `DEPENDENCIES` file\r\nshould actually always contain the revision of each component. Updating a component\r\nto a new revision implies also a new revision for the project. Indeed, the\r\n`DEPENDENCIES` file has to be updated and commited. In this case the `DEPENDENCIES`\r\nfiles acts as an always up-to-date manifest.\r\n\r\n# Features\r\n\r\nThe supported repositories formats are implemented as plugins to deptools:\r\n* git: git repository\r\n* svn: subversion repositories\r\n* tar: archive file (under development)\r\n* hg: mercurial (to be tested)\r\n\r\nThe actions that can be run on each component are for instance:\r\n* extract: extract components from their respective repositories\r\n* commit: commit changes\r\n* update/rebase: update or rebase from the origin repositories\r\n* deliver: push back to the origin repositories\r\n* dump_actual: dumps a manifest with actual revision that can be in turn used\r\nas a _DEPENDENCIES_ file\r\n\r\nFor instance, deptools may help solving source dependencies issues such as:\r\n* describing that the build of project A depends upon sources of project B\r\nat revision X in branch B and upon the file F in unique path P,\r\n* providing a simple command for extracting dependencies of project A, i.e.\r\nextracting repository B under directory b and file F under filename f,\r\n* enforcing that the unique revision/label R of source tree A is sufficient\r\nto uniquely identify A and all its source dependencies at the right revisions,\r\n* easily identify, extract, commit, update all components at once,\r\n* referencing uniformly svn, git, mercurial repositories, or\r\nftp, ssh, http URIs.\r\n\r\n# Limitations\r\n\r\nThe deptools utilities do not provide support for:\r\n* actually building source components and dependencies,\r\n* installing cache of build results,\r\n* specifying runtime dependencies between components.\r\n\r\n# Related Tools\r\n\r\nA number of other tools provide the same kind of services, though the deptools\r\nutilities aim at being independent of the components repositories formats\r\nwhich is not the case generally. Tools such as repo or maven2 are well\r\nsuited in homogeneous development environment, but are limited to either a\r\nspecific type of repository or not well suited for source level dependency\r\nmanagement.\r\n\r\n# References\r\n\r\nRefer to the INSTALL file for installation (https://github.com/guillon/deptools/blob/master/INSTALL).\r\n\r\nRefer to the project home page at:\r\nhttp://guillon.github.com/deptools\r\n\r\nRefer to the current build and validation status at:\r\nhttps://buildhive.cloudbees.com/job/guillon/job/deptools\r\n\r\nFill issues and enhancement request at:\r\nhttps://github.com/guillon/deptools/issues\r\n\r\n# License\r\n\r\nThis software is delivered under the terms of the MIT License.\r\n\r\nRefer to the LICENSE file: https://github.com/guillon/deptools/blob/master/LICENSE\r\n","google":"UA-34812443-1","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Simple source dependencies management tool","name":"Deptools"}